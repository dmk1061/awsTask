DONE & TODO

Базу данных сразу выбрал  NoSQl,  далее выбирая остановился на
Redis (сервис Amazon ElastiCache), так как это in memory db и обладает высокой производительностью при этом ее можно
настроить на сохранени состояния на диск чтобы обеспечить Durability данных( плюс делал бы бэкапы сохраненных данных).
Также в Редисе имеются подходящие для нашей задачи структуры данных.
На случая отказа одного из узлов  решил что надо поднять кластер минимум из 3х нод (локально тестировал на них)   в разных AZ

По апи
Для большей пропускной способности входящих запросов решил остановиться на реактивном подходе с использованием webflux.
Для решения проблемы конкуретного доступа к записям в БД использовал механизм пессимистичных блокировок с помощью Redisson

Для нагрузочного тестирования использовал бы Jmeter

По отказоустойчивости,
Я бы создал на AWS autoscaling group с ALB или NLB и нескольми инстансами приложения ec2 в разных AZ,  это позволило бы при отказе
одного из инстансов, автоматически поднимать другой вместо него.

По тестированию
Написал тесты для контроллера, при написании теста на сервис(он же выполнил роль дао) столкнулся с проблемой поднятия
кластера с использваонием testcontainers (перед этим и для проекта поднять из докера не получилось пришлось, локально)
и на попытках этого и подзастрял